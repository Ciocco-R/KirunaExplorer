{
  "openapi": "3.0.1",
  "info": {
    "title": "Kiruna eXplorer",
    "description": "REST APIs for the interaction with the Kiruna eXplorer service.",
    "termsOfService": "http://swagger.io/terms/",
    "version": "0.5"
  },
  "servers": [
    {
      "url": "http://localhost:8080/"
    }
  ],
  "components": {
    "schemas": {
      "Document": {
        "title": "Document",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "$schema": {
            "type": "string",
            "format": "uri",
            "description": "path to the JSON schema to use for the validation of the JSON file describing a document"
          },
          "id": {
            "type": "integer",
            "description": "The unique identifier of the document"
          },
          "title": {
            "type": "string",
            "description": "The title of the document",
            "minLength": 2,
            "maxLength": 64
          },
          "stakeholders": {
            "type": "array",
            "description": "The stakeholders of the document",
            "items": {
              "type": "string",
              "description": "The name of the stakeholder",
              "minLength": 2,
              "maxLength": 64
            },
            "minLength": 1
          },
          "scale": {
            "description": "The scale of the document",
            "type": "string",
            "oneOf": [
              {
                "pattern": "text"
              },
              {
                "pattern": "blueprint/material effects"
              },
              {
                "pattern": "^1:[1-9][0-9]*$"
              }
            ]
          },
          "issuanceDate": {
            "type": "string",
            "description": "The issuance date of the document in the format YYYY-MM-DD, YYYY-MM, or YYYY",
            "oneOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "string",
                "pattern": "^\\d{4}-(0[1-9]|1[0-2])$"
              },
              {
                "type": "string",
                "pattern": "^\\d{4}$"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of the document",
            "enum": [
              "Design document",
              "Material effect",
              "Technical document",
              "Prescriptive document",
              "Informative document"
            ]
          },
          "nrConnections": {
            "type": "integer",
            "description": "The number of connections of the document",
            "minimum": 0
          },
          "language": {
            "type": "string",
            "description": "The language of the document",
            "minLength": 2,
            "maxLength": 64
          },
          "nrPages": {
            "type": "integer",
            "description": "The number of pages of the document",
            "minimum": 0
          },
          "geolocation": {
            "description": "The coordinates of the document",
            "type": "object",
            "properties": {
              "latitude": {
                "type": "number",
                "description": "The latitude of the document",
                "minimum": 67.82295,
                "maximum": 67.88398
              },
              "longitude": {
                "type": "number",
                "description": "The longitude of the document",
                "minimum": 20.14402,
                "maximum": 20.3687
              },
              "area": {
                "type": "string",
                "description": "The area of the document",
                "pattern": "Entire municipality",
                "minLength": 2,
                "maxLength": 64
              }
            }
          },
          "description": {
            "type": "string",
            "description": "The description of the document",
            "maxLength": 1000
          }
        },
        "required": [
          "title",
          "stakeholders",
          "scale",
          "issuanceDate",
          "type"
        ]
      },
      "DocumentSnippet": {
        "title": "DocumentSnippet",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "$schema": {
            "type": "string",
            "format": "uri",
            "description": "path to the JSON schema to use for the validation of the JSON file describing a document"
          },
          "id": {
            "type": "integer",
            "description": "The unique identifier of the document"
          },
          "title": {
            "type": "string",
            "description": "The title of the document",
            "minLength": 2,
            "maxLength": 64
          },
          "stakeholders": {
            "type": "array",
            "description": "The stakeholders of the document",
            "items": {
              "type": "string",
              "description": "The name of the stakeholder",
              "minLength": 2,
              "maxLength": 64
            },
            "minLength": 1
          },
          "scale": {
            "description": "The scale of the document",
            "type": "string",
            "oneOf": [
              {
                "pattern": "text"
              },
              {
                "pattern": "blueprint/material effects"
              },
              {
                "pattern": "^1:[1-9][0-9]*$"
              }
            ]
          },
          "issuanceDate": {
            "type": "string",
            "description": "The issuance date of the document in the format YYYY-MM-DD, YYYY-MM, or YYYY",
            "oneOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "string",
                "pattern": "^\\d{4}-(0[1-9]|1[0-2])$"
              },
              {
                "type": "string",
                "pattern": "^\\d{4}$"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of the document",
            "enum": [
              "Design document",
              "Material effect",
              "Technical document",
              "Prescriptive document",
              "Informative document"
            ]
          },
          "geolocation": {
            "description": "The coordinates of the document",
            "type": "object",
            "properties": {
              "latitude": {
                "type": "number",
                "description": "The latitude of the document",
                "minimum": 67.82295,
                "maximum": 67.88398
              },
              "longitude": {
                "type": "number",
                "description": "The longitude of the document",
                "minimum": 20.14402,
                "maximum": 20.3687
              },
              "area": {
                "type": "string",
                "description": "The area of the document",
                "pattern": "Entire municipality",
                "minLength": 2,
                "maxLength": 64
              }
            }
          }
        },
        "required": [
          "title",
          "scale",
          "issuanceDate",
          "type"
        ]
      },
      "Link": {
        "title": "Link",
        "description": "JSON schema for a link data structure",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the link",
            "enum": [
              "Direct consequence",
              "Collateral consequence",
              "Projection",
              "Update"
            ]
          },
          "linkId": {
            "type": "integer",
            "description": "The id link"
          },
          "documentId": {
            "type": "integer",
            "description": "The id of the document linked"
          }
        },
        "required": [
          "type",
          "documentId"
        ]
      },
      "User": {
        "description": "schema for a User data structure",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "$schema": {
            "type": "string",
            "description": "path to the JSON Schema to use for the validation of the JSON data structure describing the user"
          },
          "id": {
            "type": "integer",
            "description": "unique identifier for the user"
          },
          "username": {
            "type": "string",
            "description": "the username of the user",
            "minLength": 2,
            "maxLength": 16
          }
        }
      },
      "Users": {
        "description": "schema for Users data structure",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/User"
        }
      },
      "Credentials": {
        "description": "schema for a Credentials data structure",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "username": {
            "type": "string",
            "description": "the username of the user",
            "minLength": 2,
            "maxLength": 16
          },
          "password": {
            "type": "string",
            "description": "user's password",
            "minLength": 8,
            "maxLength": 16
          }
        },
        "required": [
          "username",
          "password"
        ]
      }
    },
    "securitySchemes": {
      "cookieAuth": {
        "description": "JWT to identify the authenticated user.",
        "type": "apiKey",
        "in": "cookie",
        "name": "connect.sid"
      }
    }
  },
  "paths": {
    "/api/v1/documents": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Get documents",
        "description": "All existing documents are retrieved",
        "operationId": "getDocuments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentSnippet"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "document"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Create new document",
        "description": "A new document is created by an authenticated user",
        "operationId": "createDocument",
        "parameters": [],
        "requestBody": {
          "description": "Representation of the document to be created (with no id because it is assigned by the service)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "The reason why the request was bad"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "document"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Update document",
        "description": "Updates an already existing document with the representation given. The id of the document is specified in the payload.",
        "operationId": "updateDocument",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Document"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "The reason why the request was bad"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v1/documents/{id}": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Get document by id",
        "description": "Retrieve the document with id = {id}",
        "operationId": "getSingleDocument",
        "parameters": [
          {
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "document"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Delete document",
        "description": "Delete the document with id = {id}",
        "operationId": "deleteSingleDocument",
        "parameters": [
          {
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v1/documents/links": {
      "put": {
        "tags": [
          "document"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Update link",
        "description": "Update an already existing link. The id of the link is specified in the payload.",
        "operationId": "updateLink",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Link"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "The reason why the request was bad"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v1/documents/{id}/links": {
      "parameters": [
        {
          "name": "id",
          "schema": {
            "type": "integer"
          },
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Get links of a document",
        "description": "Retrieve the list of links of the document with id = {id}",
        "operationId": "getSingleDocumentLinks",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "documentSnippet": {
                        "$ref": "#/components/schemas/DocumentSnippet"
                      },
                      "links": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "linkId": {
                              "type": "integer",
                              "description": "The id link"
                            },
                            "linkType": {
                              "type": "string",
                              "description": "The type of the link",
                              "enum": [
                                "Direct consequence",
                                "Collateral consequence",
                                "Projection",
                                "Update"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "document"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Create link",
        "description": "Create a new link for the document with id = {id}",
        "operationId": "createLink",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Link"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "The reason why the request was bad"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v1/documents/{id}/links/{linkId}": {
      "delete": {
        "tags": [
          "document"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Delete link",
        "description": "Deletes the link with id = {linkId}",
        "operationId": "deleteLink",
        "parameters": [
          {
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "linkId",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "user"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get users",
        "description": "Retrieve the complete list of users (password exluced). Only for testing and admin purposes",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v1/users/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get user",
        "description": "Retrieve information about a user",
        "operationId": "getSingleUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to get",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v1/sessions": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Log in",
        "description": "Authenticate a user and return a session",
        "operationId": "logIn",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Credentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v1/sessions/current": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get current user info",
        "description": "Retrieve the information of the currently authenticated user",
        "operationId": "getUserInfo",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "auth"
        ],
        "summary": "Log out",
        "description": "Log out the current user",
        "operationId": "logOut",
        "responses": {
          "204": {
            "description": "No content"
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    }
  }
}